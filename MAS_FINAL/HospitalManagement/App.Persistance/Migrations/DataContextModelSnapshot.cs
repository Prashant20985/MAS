// <auto-generated />
using System;
using App.Persistance;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace App.Persistance.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("App.Domain.Models.Appointment", b =>
                {
                    b.Property<int>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppointmentId"));

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("NurseId")
                        .HasColumnType("int");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("AppointmentId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("NurseId");

                    b.HasIndex("RoomId");

                    b.ToTable("Appointment");

                    b.HasData(
                        new
                        {
                            AppointmentId = 1,
                            DoctorId = 1,
                            EndTime = new DateTime(2022, 1, 1, 11, 30, 0, 0, DateTimeKind.Unspecified),
                            NurseId = 3,
                            RoomId = 1,
                            StartTime = new DateTime(2022, 1, 1, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            Status = "BOOKED"
                        },
                        new
                        {
                            AppointmentId = 2,
                            DoctorId = 2,
                            EndTime = new DateTime(2023, 5, 7, 13, 30, 0, 0, DateTimeKind.Unspecified),
                            NurseId = 4,
                            RoomId = 2,
                            StartTime = new DateTime(2023, 5, 7, 12, 30, 0, 0, DateTimeKind.Unspecified),
                            Status = "AVAILABLE"
                        });
                });

            modelBuilder.Entity("App.Domain.Models.Certification", b =>
                {
                    b.Property<int>("CertificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CertificationId"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CertificationId");

                    b.ToTable("Certification");

                    b.HasData(
                        new
                        {
                            CertificationId = 1,
                            Title = "any title"
                        },
                        new
                        {
                            CertificationId = 2,
                            Title = "any title"
                        });
                });

            modelBuilder.Entity("App.Domain.Models.Diagnosis", b =>
                {
                    b.Property<int>("DiagnosisId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DiagnosisId"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("DiagnosisId");

                    b.ToTable("Diagnosis");

                    b.HasData(
                        new
                        {
                            DiagnosisId = 1,
                            Title = "Kemo"
                        },
                        new
                        {
                            DiagnosisId = 2,
                            Title = "ECG"
                        });
                });

            modelBuilder.Entity("App.Domain.Models.Equipment", b =>
                {
                    b.Property<int>("EquipmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EquipmentId"));

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("EquipmentId");

                    b.ToTable("Equipment");

                    b.HasData(
                        new
                        {
                            EquipmentId = 1,
                            Price = 100.99m,
                            Title = "Surgery"
                        },
                        new
                        {
                            EquipmentId = 2,
                            Price = 80.99m,
                            Title = "PostMortem"
                        });
                });

            modelBuilder.Entity("App.Domain.Models.Examination", b =>
                {
                    b.Property<int>("ExaminationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExaminationId"));

                    b.Property<int>("ExaminationTypeId")
                        .HasColumnType("int");

                    b.HasKey("ExaminationId");

                    b.HasIndex("ExaminationTypeId");

                    b.ToTable("Examination");

                    b.HasData(
                        new
                        {
                            ExaminationId = 1,
                            ExaminationTypeId = 1
                        },
                        new
                        {
                            ExaminationId = 2,
                            ExaminationTypeId = 2
                        });
                });

            modelBuilder.Entity("App.Domain.Models.ExaminationDiagnosis", b =>
                {
                    b.Property<int>("DiagnosisId")
                        .HasColumnType("int");

                    b.Property<int>("ExaminationId")
                        .HasColumnType("int");

                    b.HasKey("DiagnosisId", "ExaminationId");

                    b.HasIndex("ExaminationId");

                    b.ToTable("ExaminationDiagnosis");

                    b.HasData(
                        new
                        {
                            DiagnosisId = 1,
                            ExaminationId = 1
                        },
                        new
                        {
                            DiagnosisId = 2,
                            ExaminationId = 2
                        });
                });

            modelBuilder.Entity("App.Domain.Models.ExaminationType", b =>
                {
                    b.Property<int>("ExaminationTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExaminationTypeId"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("ExaminationTypeId");

                    b.ToTable("ExaminationType");

                    b.HasData(
                        new
                        {
                            ExaminationTypeId = 1,
                            Title = "Full"
                        },
                        new
                        {
                            ExaminationTypeId = 2,
                            Title = "Partial"
                        });
                });

            modelBuilder.Entity("App.Domain.Models.Medicine", b =>
                {
                    b.Property<int>("MedicineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicineId"));

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<string>("MedicineType")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("ProcedureId")
                        .HasColumnType("int");

                    b.HasKey("MedicineId");

                    b.HasIndex("ProcedureId");

                    b.ToTable("Medicine");

                    b.HasData(
                        new
                        {
                            MedicineId = 1,
                            Amount = 10,
                            MedicineType = "CAPSULE",
                            ProcedureId = 1
                        },
                        new
                        {
                            MedicineId = 2,
                            Amount = 5,
                            MedicineType = "LIQUID",
                            ProcedureId = 2
                        });
                });

            modelBuilder.Entity("App.Domain.Models.Person", b =>
                {
                    b.Property<int>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PersonId"));

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("PersonId");

                    b.ToTable("Person");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("App.Domain.Models.Procedure", b =>
                {
                    b.Property<int>("ProcedureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProcedureId"));

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<int>("ProcedureTypeId")
                        .HasColumnType("int");

                    b.Property<int>("TreatmentId")
                        .HasColumnType("int");

                    b.HasKey("ProcedureId");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("ProcedureTypeId");

                    b.HasIndex("TreatmentId");

                    b.ToTable("Procedure");

                    b.HasData(
                        new
                        {
                            ProcedureId = 1,
                            AppointmentId = 1,
                            ProcedureTypeId = 1,
                            TreatmentId = 1
                        },
                        new
                        {
                            ProcedureId = 2,
                            AppointmentId = 2,
                            ProcedureTypeId = 2,
                            TreatmentId = 2
                        });
                });

            modelBuilder.Entity("App.Domain.Models.ProcedureType", b =>
                {
                    b.Property<int>("ProcedureTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProcedureTypeId"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ProcedureTypeId");

                    b.ToTable("ProcedureType");

                    b.HasData(
                        new
                        {
                            ProcedureTypeId = 1,
                            Title = "Dont Know"
                        },
                        new
                        {
                            ProcedureTypeId = 2,
                            Title = "Dont Care"
                        });
                });

            modelBuilder.Entity("App.Domain.Models.Procedure_Equipment", b =>
                {
                    b.Property<int>("EquipmentId")
                        .HasColumnType("int");

                    b.Property<int>("ProceureId")
                        .HasColumnType("int");

                    b.HasKey("EquipmentId", "ProceureId");

                    b.HasIndex("ProceureId");

                    b.ToTable("Procedure_Equipment");

                    b.HasData(
                        new
                        {
                            EquipmentId = 1,
                            ProceureId = 1
                        },
                        new
                        {
                            EquipmentId = 2,
                            ProceureId = 2
                        });
                });

            modelBuilder.Entity("App.Domain.Models.Room", b =>
                {
                    b.Property<int>("RoomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoomId"));

                    b.Property<string>("RoomNumber")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.HasKey("RoomId");

                    b.ToTable("Room");

                    b.HasData(
                        new
                        {
                            RoomId = 1,
                            RoomNumber = "1230A"
                        },
                        new
                        {
                            RoomId = 2,
                            RoomNumber = "1234D"
                        });
                });

            modelBuilder.Entity("App.Domain.Models.Specialization", b =>
                {
                    b.Property<int>("SecializationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SecializationId"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("SecializationId");

                    b.ToTable("Specialization");

                    b.HasData(
                        new
                        {
                            SecializationId = 1,
                            Title = "Dentistry"
                        },
                        new
                        {
                            SecializationId = 2,
                            Title = "Cardiology"
                        });
                });

            modelBuilder.Entity("App.Domain.Models.Treatment", b =>
                {
                    b.Property<int>("TreatmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TreatmentId"));

                    b.Property<int>("DiagnosisId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("TreatmentId");

                    b.HasIndex("DiagnosisId");

                    b.ToTable("Treatment");

                    b.HasData(
                        new
                        {
                            TreatmentId = 1,
                            DiagnosisId = 1,
                            Title = "Main"
                        },
                        new
                        {
                            TreatmentId = 2,
                            DiagnosisId = 2,
                            Title = "Secondry"
                        });
                });

            modelBuilder.Entity("App.Domain.Models.MedicalStaff", b =>
                {
                    b.HasBaseType("App.Domain.Models.Person");

                    b.Property<decimal>("ratePerHour")
                        .HasColumnType("decimal(18,2)");

                    b.ToTable("Medical_Staff");
                });

            modelBuilder.Entity("App.Domain.Models.Patient", b =>
                {
                    b.HasBaseType("App.Domain.Models.Person");

                    b.Property<int>("DiagnosisId")
                        .HasColumnType("int");

                    b.Property<long>("InsuranceNumber")
                        .HasColumnType("bigint");

                    b.HasIndex("DiagnosisId");

                    b.ToTable("Patient");

                    b.HasData(
                        new
                        {
                            PersonId = 5,
                            DateOfBirth = new DateTime(2002, 8, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Victor",
                            Gender = "MALE",
                            LastName = "Stone",
                            DiagnosisId = 1,
                            InsuranceNumber = 12365478L
                        },
                        new
                        {
                            PersonId = 6,
                            DateOfBirth = new DateTime(2002, 8, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Arthur",
                            Gender = "FEMALE",
                            LastName = "Curry",
                            DiagnosisId = 2,
                            InsuranceNumber = 12365008L
                        });
                });

            modelBuilder.Entity("App.Domain.Models.Doctor", b =>
                {
                    b.HasBaseType("App.Domain.Models.MedicalStaff");

                    b.Property<int>("SpecializationId")
                        .HasColumnType("int");

                    b.HasIndex("SpecializationId");

                    b.ToTable("Doctor");

                    b.HasData(
                        new
                        {
                            PersonId = 1,
                            DateOfBirth = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Bruce",
                            Gender = "MALE",
                            LastName = "Wayne",
                            ratePerHour = 100.00m,
                            SpecializationId = 1
                        },
                        new
                        {
                            PersonId = 2,
                            DateOfBirth = new DateTime(1999, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Clark",
                            Gender = "MALE",
                            LastName = "Kent",
                            ratePerHour = 150.99m,
                            SpecializationId = 2
                        });
                });

            modelBuilder.Entity("App.Domain.Models.Nurse", b =>
                {
                    b.HasBaseType("App.Domain.Models.MedicalStaff");

                    b.Property<int>("CertificationId")
                        .HasColumnType("int");

                    b.HasIndex("CertificationId");

                    b.ToTable("Nurse");

                    b.HasData(
                        new
                        {
                            PersonId = 3,
                            DateOfBirth = new DateTime(1998, 5, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Dianna",
                            Gender = "FEMALE",
                            LastName = "Price",
                            ratePerHour = 90.99m,
                            CertificationId = 1
                        },
                        new
                        {
                            PersonId = 4,
                            DateOfBirth = new DateTime(1998, 5, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Barry",
                            Gender = "MALE",
                            LastName = "Allen",
                            ratePerHour = 90.99m,
                            CertificationId = 2
                        });
                });

            modelBuilder.Entity("App.Domain.Models.Appointment", b =>
                {
                    b.HasOne("App.Domain.Models.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("App.Domain.Models.Nurse", "Nurse")
                        .WithMany("Appointments")
                        .HasForeignKey("NurseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("App.Domain.Models.Room", "Room")
                        .WithMany("Appointments")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Nurse");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("App.Domain.Models.Examination", b =>
                {
                    b.HasOne("App.Domain.Models.ExaminationType", "ExaminationType")
                        .WithMany("Examinations")
                        .HasForeignKey("ExaminationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExaminationType");
                });

            modelBuilder.Entity("App.Domain.Models.ExaminationDiagnosis", b =>
                {
                    b.HasOne("App.Domain.Models.Diagnosis", "Diagnosis")
                        .WithMany("ExaminationDiagnoses")
                        .HasForeignKey("DiagnosisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.Models.Examination", "Examination")
                        .WithMany("ExaminationDiagnoses")
                        .HasForeignKey("ExaminationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Diagnosis");

                    b.Navigation("Examination");
                });

            modelBuilder.Entity("App.Domain.Models.Medicine", b =>
                {
                    b.HasOne("App.Domain.Models.Procedure", "Procedure")
                        .WithMany("Medicines")
                        .HasForeignKey("ProcedureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Procedure");
                });

            modelBuilder.Entity("App.Domain.Models.Procedure", b =>
                {
                    b.HasOne("App.Domain.Models.Appointment", "Appointment")
                        .WithMany("Procedures")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.Models.ProcedureType", "ProcedureType")
                        .WithMany("Procedures")
                        .HasForeignKey("ProcedureTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.Models.Treatment", "Treatment")
                        .WithMany("Procedures")
                        .HasForeignKey("TreatmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("ProcedureType");

                    b.Navigation("Treatment");
                });

            modelBuilder.Entity("App.Domain.Models.Procedure_Equipment", b =>
                {
                    b.HasOne("App.Domain.Models.Equipment", "Equipment")
                        .WithMany("Procedure_Equipment")
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.Models.Procedure", "Procedure")
                        .WithMany("Procedure_Equipment")
                        .HasForeignKey("ProceureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Equipment");

                    b.Navigation("Procedure");
                });

            modelBuilder.Entity("App.Domain.Models.Treatment", b =>
                {
                    b.HasOne("App.Domain.Models.Diagnosis", "Diagnosis")
                        .WithMany("Treatments")
                        .HasForeignKey("DiagnosisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Diagnosis");
                });

            modelBuilder.Entity("App.Domain.Models.MedicalStaff", b =>
                {
                    b.HasOne("App.Domain.Models.Person", null)
                        .WithOne()
                        .HasForeignKey("App.Domain.Models.MedicalStaff", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("App.Domain.Models.Patient", b =>
                {
                    b.HasOne("App.Domain.Models.Diagnosis", "Diagnosis")
                        .WithMany("Patients")
                        .HasForeignKey("DiagnosisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.Models.Person", null)
                        .WithOne()
                        .HasForeignKey("App.Domain.Models.Patient", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Diagnosis");
                });

            modelBuilder.Entity("App.Domain.Models.Doctor", b =>
                {
                    b.HasOne("App.Domain.Models.MedicalStaff", null)
                        .WithOne()
                        .HasForeignKey("App.Domain.Models.Doctor", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.Models.Specialization", "Specialization")
                        .WithMany("Doctors")
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Specialization");
                });

            modelBuilder.Entity("App.Domain.Models.Nurse", b =>
                {
                    b.HasOne("App.Domain.Models.Certification", "Cerification")
                        .WithMany("Nurses")
                        .HasForeignKey("CertificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.Models.MedicalStaff", null)
                        .WithOne()
                        .HasForeignKey("App.Domain.Models.Nurse", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cerification");
                });

            modelBuilder.Entity("App.Domain.Models.Appointment", b =>
                {
                    b.Navigation("Procedures");
                });

            modelBuilder.Entity("App.Domain.Models.Certification", b =>
                {
                    b.Navigation("Nurses");
                });

            modelBuilder.Entity("App.Domain.Models.Diagnosis", b =>
                {
                    b.Navigation("ExaminationDiagnoses");

                    b.Navigation("Patients");

                    b.Navigation("Treatments");
                });

            modelBuilder.Entity("App.Domain.Models.Equipment", b =>
                {
                    b.Navigation("Procedure_Equipment");
                });

            modelBuilder.Entity("App.Domain.Models.Examination", b =>
                {
                    b.Navigation("ExaminationDiagnoses");
                });

            modelBuilder.Entity("App.Domain.Models.ExaminationType", b =>
                {
                    b.Navigation("Examinations");
                });

            modelBuilder.Entity("App.Domain.Models.Procedure", b =>
                {
                    b.Navigation("Medicines");

                    b.Navigation("Procedure_Equipment");
                });

            modelBuilder.Entity("App.Domain.Models.ProcedureType", b =>
                {
                    b.Navigation("Procedures");
                });

            modelBuilder.Entity("App.Domain.Models.Room", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("App.Domain.Models.Specialization", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("App.Domain.Models.Treatment", b =>
                {
                    b.Navigation("Procedures");
                });

            modelBuilder.Entity("App.Domain.Models.Doctor", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("App.Domain.Models.Nurse", b =>
                {
                    b.Navigation("Appointments");
                });
#pragma warning restore 612, 618
        }
    }
}
